;;;; Copyright 2018-Present Modern Interpreters Inc.
;;;;
;;;; This Source Code Form is subject to the terms of the Mozilla Public
;;;; License, v. 2.0. If a copy of the MPL was not distributed with this
;;;; file, You can obtain one at https://mozilla.org/MPL/2.0/.

(pkg:define-package :util/phabricator/conduit
  (:use #:cl
        #:alexandria)
  (:import-from #:util/request
                #:http-request)
  (:export #:phab-instance
           #:call-conduit
           #:url
           #:api-key
           #:make-phab-instance-from-arcrc))

(defclass phab-instance ()
  ((url :initarg :url
        :accessor url)
   (api-key :initarg :api-key
            :accessor api-key)))

(defun make-phab-instance-from-arcrc (url)
  (let* ((api-url (quri:render-uri (quri:merge-uris
                                    (quri:uri "/api/")
                                    (quri:uri url)))))
   (with-open-file (file "~/.arcrc")
     (let* ((json:*json-identifier-name-to-lisp* #'string)
            (arcrc (json:decode-json file))
            (hosts (assoc-value arcrc :|hosts|))
            (host
              ;; Surely there's a better way to do this.
              (assoc-value hosts (intern api-url "KEYWORD")))
            (token
              (assoc-value host :|token|)))
       (assert token)
       (make-instance 'phab-instance
                       :url url
                       :api-key token)))))


#|

Passing an array or dictionary can be tricky, for instance to pass:

{
  "0": {
    "name": "passingtest",
    "result": "fail"
  }
}

You would pass it as:

$ curl https://phabricator.tdrhq.com/api/harbormaster.sendmessage \
    -d api.token=api-token \
    -d receiver=PHID-HMBT-u7un2slpgyixqmnsi67f \
    -d type=pass \
    -d unit[0][name]=passingtest \
    -d unit[0][result]=fail

The above curl command is generated by the phabricator conduit console.

|#

(defun serialize-params (params)
  (let ((res nil))
    (labels ((recurse (value prefix)
               (cond
                 ((or (stringp value)
                      (numberp value))
                  (push (cons prefix (format nil "~a" value)) res))
                 ((listp value)
                  (loop for el in value
                        for i from 0
                        do
                           (recurse el (format nil "~a[~d]" prefix i))))
                 ((hash-table-p value)
                  (loop for key being the hash-keys of value
                          using (hash-value val)
                        do
                           (recurse val (format nil "~a[~a]" prefix key)))))))
      (loop for (key . value) in params
            do
               (recurse value key)
            finally (return (nreverse res))))))

(defmethod call-conduit ((phab phab-instance) name params)
  #+nil(log:debug "initial params: ~s" params)
  (let* ((params (serialize-params params))
         (params `(,@params
                   ("api.token" . ,(api-key phab)))))
    #+nil(log:debug "using params: ~S" params)
   (let ((res
           (http-request
            (format nil "~a/api/~a" (url phab) name)
            :method :post
            :want-string t
            :parameters params)))
     (let* ((res
              (json:decode-json-from-string res))
            (error-info
              (assoc-value res :error--info)))
       (when error-info
         (error "Got conduit error: ~A " (str:shorten 500 error-info)))
       res))))
